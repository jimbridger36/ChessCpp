#pragma once
#include "Debug.h"
#include "Universal.h"

#include <string>
#include <fstream>

namespace Debug {


	void printAttack0D(Board::BOARD &board) {
		board.printAttack0();
	}

	void checkDistance(bool printTrue) {

		struct pair {
		public:
			int a, b;
		};

		int actual[64][37] = { 
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 7, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 1, 7, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 1, 2, 7, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 1, 3, 7, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 1, 4, 7, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 1, 5, 7, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 1, 6, 7, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 7, 7, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 6, 6, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 1, 6, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 1, 2, 6, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 1, 3, 6, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 1, 4, 6, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 1, 5, 6, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 1, 6, 6, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 6, 6, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
			{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 5, 5, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
			{ 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 1, 5, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 1, 2, 5, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 1, 3, 5, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 1, 4, 5, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 1, 5, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 1, 5, 5, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0 },
			{ 0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
			{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 4, 4, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
			{ 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 3, 3, 1, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 1, 2, 4, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 3, 3, 1, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 1, 3, 4, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 3, 3, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 1, 4, 4, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 3, 2, 1, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 1, 4, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 3, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 4, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 4, 4, 1, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 1, 2, 3, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 4, 4, 1, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 1, 3, 3, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 4, 4, 3, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 1, 3, 3, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 4, 4, 2, 1, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 1, 3, 3, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 5, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 5, 5, 1, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 5, 5, 1, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 5, 4, 1, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 4, 5, 3, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 5, 5, 2, 1, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 5, 5, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 0, 0, 0, 0, 0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 6, 6, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 6, 6, 1, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 6, 5, 1, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 6, 4, 1, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 4, 6, 3, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 5, 6, 2, 1, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 6, 6, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 0, 0, 0, 0, 0, 1, 6, 6, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 7, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 7, 6, 1, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 7, 5, 1, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 7, 4, 1, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 4, 7, 3, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 5, 7, 2, 1, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 6, 7, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 0, 0, 0, 0, 0, 1, 7, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };

		bool correct = true;

		std::list<pair> lst = *(new std::list<pair>());


		pair pr;

		for (int i = 0; i < 64; i++) {
			for (int j = 0; j < 37; j++) {
				if (Info::distanceInfoAdd18[i][j] != actual[i][j]) {
					correct = false;
					pr.a = i; pr.b = j;

					lst.push_back(pr);


				}
			}
		}



		if (correct and printTrue){
			std::cout << " distance array is correct" << std::endl;
		}
		else if(!correct){
			std::cout << "distance is dodgy" << std::endl;
		}


	}

	void printDirectionInfoFlat() {
		
		std::string strM = "{ ";


		for (int piece = 0; piece < 16; piece++) {

			std::string str = "{";

			for (int entry = 0; entry < 8; entry++) {
				str += std::to_string(Info::directionInfoFlat[piece][entry]);
				str += ", ";
				// was currently trying to print he direction info so i can put it in the code as a normal value and not have to calculate it every time



			}
			str += "0}";
			if (piece != 16)
				str += ", ";
			strM += str;


			//for (int entry = 0; Info::directionInfoFlat[piece][entry] != 0; entry++) {
			//	std::cout << Info::directionInfoFlat[piece][entry] << " ";
			//}


		}
		strM += "};";

		std::cout << strM << std::endl;

	}


	ulong printZVal(Board::BOARD &board) {

		std::cout << "ZVal is: " << board.ZVal << std::endl;
		return board.ZVal;
	}


	// DEBUGHHREPLACEMENT
	void savedistanceInfoAdd18ToFile(const char* fileName) { }

	// savedistanceInfoAdd18ToFile
	/*
	void savedistanceInfoAdd18ToFile(const char* fileName) {


		//const char* fullName = (std::string("C:\Users\Jim\PyCharmProjects\ChessCPPAttemptBStrap\InPycharmProject2\") + std::string(fileName)).c_str();
		const char* fullName = fileName;
		std::cout << fullName << std::endl;

		std::ofstream fw(fullName, std::ofstream::out);


		if (not fw.is_open()) {
			std::cout << std::string(fileName) + " failed to open";
		}
		assert(fw.is_open());
		

		int dist;

		for (int pos = 0; pos < 64; pos++) {
			for (int entry = 0; entry < 37; entry++) {
				dist = Info::distanceInfoAdd18[pos][entry];
				fw << dist << " ";
				//assert(dist == 0 or dist == 1);
			}
			fw << std::endl;


		}

		fw.close();
	}


	*/

	int* getDirInfoPointer() {
		return (int*) &Info::directionInfoFlat;
	}

	int* getDistInfoFlat(int* ptr) {

		for (int i = 0; i++; i < 64)
			for (int j = 0; j++; j < 37)
				ptr[37 * i + j] = Info::distanceInfoAdd18[i][j];;

		// DEBUGHHREPLACEMENT
		return (int*)&Info::distanceInfoAdd18;
	}


	Move* genAllMovesDB(Board::BOARD &board, int& num) {


		std::list<Move> *lstPtr;

		lstPtr = new std::list<Move>();
		board.genBothSidesMoves(lstPtr);
		std::cout << "after generating the moves";
		printAttack0D(board);
		num = lstPtr->size();

		Move* arr = new Move[num];

		//for (int i = 0; i < num; i++) {
		//	std::cout << std::to_string(arr[i].start) << ", ";
		//}
		//std::cout << std::endl;

		int i = 0;
		for (auto iter = (*lstPtr).begin(); iter != (*lstPtr).end(); iter++)
		{
			arr[i] = *iter;
			i++;
		}

		//std::cout << "right before the end of the function ";
		//printAttack0D(board);
		return arr;


		//std::cout<<
		/*
		ulong* attack;
		attack = board.getAttackedPtr();
		std::cout << (attack[0]) << std::endl;
		std::cout << attack[1] << std::endl;
		*/



	}



}