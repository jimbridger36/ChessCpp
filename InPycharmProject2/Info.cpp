#include "Universal.h"
#include "Info.h"

namespace Info {

	//const int arrxyz123[3] = {1,2,3};
	


	int distanceInfoAdd18[64][37] = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 7, 1, 0, 0, 0, 0, 0, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 1, 7, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 1, 2, 7, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 1, 3, 7, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 1, 4, 7, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 1, 5, 7, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 1, 6, 7, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 7, 7, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 6, 6, 1, 0, 0, 0, 0, 0, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 1, 6, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 1, 2, 6, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 1, 3, 6, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 1, 4, 6, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 1, 5, 6, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 1, 6, 6, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 6, 6, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 5, 5, 1, 0, 0, 0, 0, 0, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 1, 5, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 1, 2, 5, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 1, 3, 5, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 1, 4, 5, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 1, 5, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 1, 5, 5, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 4, 4, 1, 0, 0, 0, 0, 0, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 3, 3, 1, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 1, 2, 4, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 3, 3, 1, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 1, 3, 4, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 3, 3, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 1, 4, 4, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 3, 2, 1, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 1, 4, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 3, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 4, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 4, 4, 1, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 1, 2, 3, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 4, 4, 1, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 1, 3, 3, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 4, 4, 3, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 1, 3, 3, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 4, 4, 2, 1, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 1, 3, 3, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 5, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 5, 5, 1, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 5, 5, 1, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 5, 4, 1, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 4, 5, 3, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 5, 5, 2, 1, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 5, 5, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 0, 0, 0, 0, 0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 6, 6, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 6, 6, 1, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 6, 5, 1, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 6, 4, 1, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 4, 6, 3, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 5, 6, 2, 1, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 6, 6, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 0, 0, 0, 0, 0, 1, 6, 6, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 7, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 7, 6, 1, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 7, 5, 1, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 3, 7, 4, 1, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 4, 7, 3, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 5, 7, 2, 1, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 1, 6, 7, 1, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 0, 0, 0, 0, 0, 1, 7, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };


	int enumToPieceVal[16] = {
	0,
	1,
	3,
	3,
	5,
	50,
	8,
	0,
	0,
	-1,
	-3,
	-3,
	-5,
	-50,
	-8,
	0
	};

	// data loaded by startupfunction from binary file generated by python
	// DEBUGHHREPLACEMENT
	// int distanceInfoAdd18[64][37] = {};

	// set up by starting function
	// first index is the piece type, second is the direction (0 is null, the loop to check should look for this as the end)
	int directionInfoFlat[16][9] = { 
		{0, 0, 0, 0, 0, 0, 0, 0, 0}, // EMPTY
		{9, 7, 0, 0, 0, 0, 0, 0, 0}, // PAWN (attack i think, little bit pointless considering pawns are handled manually)
		{10, 17, 15, 6, -10, -17, -15, -6, 0}, // KNIGHT
		{9, 7, -9, -7, 0, 0, 0, 0, 0}, // BISHOP
		{1, 8, -1, -8, 0, 0, 0, 0, 0}, // ROOK
		{1, 9, 8, 7, -1, -9, -8, -7, 0}, // KING
		{1, 9, 8, 7, -1, -9, -8, -7, 0}, // QUEEN
		{0, 0, 0, 0, 0, 0, 0, 0, 0}, // NOTHING
		{0, 0, 0, 0, 0, 0, 0, 0, 0}, // BLACK EMPTY
		{-9, -7, 0, 0, 0, 0, 0, 0, 0}, // BLACK PAWN
		{10, 17, 15, 6, -10, -17, -15, -6, 0}, //same as above for the rest
		{9, 7, -9, -7, 0, 0, 0, 0, 0},
		{1, 8, -1, -8, 0, 0, 0, 0, 0},
		{1, 9, 8, 7, -1, -9, -8, -7, 0},
		{1, 9, 8, 7, -1, -9, -8, -7, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0}
	};


	int charToPiece[128] = {};



	// [1] is black, [0] is white (if EnP rank is the rank the piece being eaten (white/black) sits on)
	int colourEnPassantRank[2] = { 3, 4 };
}
